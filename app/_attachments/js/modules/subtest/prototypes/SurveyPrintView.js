// Generated by CoffeeScript 1.3.3
(function() {
  var SurveyPrintView,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  SurveyPrintView = (function(_super) {

    __extends(SurveyPrintView, _super);

    function SurveyPrintView() {
      this.onQuestionRendered = __bind(this.onQuestionRendered, this);
      return SurveyPrintView.__super__.constructor.apply(this, arguments);
    }

    SurveyPrintView.prototype.events = {
      'change input': 'updateSkipLogic',
      'change textarea': 'updateSkipLogic'
    };

    SurveyPrintView.prototype.initialize = function(options) {
      var _this = this;
      this.model = this.options.model;
      this.parent = this.options.parent;
      this.isObservation = this.options.isObservation;
      this.questionViews = [];
      this.answered = [];
      this.questions = new Questions;
      return this.questions.fetch({
        key: this.model.get("assessmentId"),
        success: function(collection) {
          _this.questions = new Questions(_this.questions.where({
            subtestId: _this.model.id
          }));
          _this.questions.sort();
          return _this.render();
        }
      });
    };

    SurveyPrintView.prototype.render = function() {
      var i, isNotAsked, notAskedCount, oneView, question, required, _base, _i, _len, _ref;
      notAskedCount = 0;
      this.questions.sort();
      if (this.questions.models != null) {
        _ref = this.questions.models;
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          question = _ref[i];
          required = parseInt(question.get("linkedGridScore")) || 0;
          isNotAsked = (required !== 0 && this.parent.getGridScore() < required) || this.parent.gridWasAutostopped();
          if (isNotAsked) {
            notAskedCount++;
          }
          oneView = new QuestionPrintView({
            model: question,
            parent: this,
            notAsked: isNotAsked,
            isObservation: this.isObservation
          });
          oneView.on("rendered", this.onQuestionRendered);
          oneView.on("answer scroll", this.onQuestionAnswer);
          oneView.render();
          this.questionViews[i] = oneView;
          this.$el.append(oneView.el);
        }
      }
      this.updateSkipLogic();
      if (this.questions.length === notAskedCount) {
        if (typeof (_base = this.parent).next === "function") {
          _base.next();
        }
      }
      return this.trigger("rendered");
    };

    SurveyPrintView.prototype.onQuestionRendered = function() {
      return this.trigger("subRendered");
    };

    return SurveyPrintView;

  })(Backbone.View);

}).call(this);
