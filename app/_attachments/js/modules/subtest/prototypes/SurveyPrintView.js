// Generated by CoffeeScript 1.4.0
var SurveyPrintView,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

SurveyPrintView = (function(_super) {

  __extends(SurveyPrintView, _super);

  function SurveyPrintView() {
    this.onQuestionRendered = __bind(this.onQuestionRendered, this);
    return SurveyPrintView.__super__.constructor.apply(this, arguments);
  }

  SurveyPrintView.prototype.className = "SurveyPrintView";

  SurveyPrintView.prototype.initialize = function(options) {
    var _this = this;
    this.model = this.options.model;
    this.parent = this.options.parent;
    this.isObservation = this.options.isObservation;
    this.questionViews = [];
    this.answered = [];
    this.questions = new Questions;
    return this.questions.fetch({
      key: this.model.get("assessmentId"),
      success: function(collection) {
        _this.questions = new Questions(_this.questions.where({
          subtestId: _this.model.id
        }));
        _this.questions.sort();
        return _this.render();
      }
    });
  };

  SurveyPrintView.prototype.render = function() {
    var i, notAskedCount, oneView, question, _base, _i, _len, _ref,
      _this = this;
    this.$el.html("      <div id='" + (this.model.get("_id")) + "' class='print-page'>        <div style='font-style:italic;padding-bottom:20px;color:gray;'>" + (this.model.get("name")) + "</div>        <div class='survey-questions'></div>      </div>      <style>        .survey-questions .stimuli-question{          padding-bottom: 3%;        }      </style>    ");
    notAskedCount = 0;
    this.questions.sort();
    if (this.questions.models != null) {
      _ref = this.questions.models;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        question = _ref[i];
        oneView = new QuestionPrintView({
          model: question,
          parent: this,
          isObservation: this.isObservation
        });
        oneView.on("rendered", this.onQuestionRendered);
        oneView.render();
        this.questionViews[i] = oneView;
        this.$el.find('.survey-questions').append(oneView.el);
      }
    }
    if (this.questions.length === notAskedCount) {
      if (typeof (_base = this.parent).next === "function") {
        _base.next();
      }
    }
    if (this.format === "stimuli") {
      _.delay(function() {
        return _this.increaseFontUntilOverflow($("#" + (_this.model.get("_id")))[0], $("#" + (_this.model.get("_id")) + " .survey-questions"));
      }, 1000);
    }
    return this.trigger("rendered");
  };

  SurveyPrintView.prototype.increaseFontUntilOverflow = function(outerDiv, innerDiv) {
    var currentPercentage, incrementAmount, overflow;
    overflow = 100;
    incrementAmount = 3;
    currentPercentage = 100;
    while (outerDiv.scrollWidth - 1 <= $(outerDiv).innerWidth() && outerDiv.scrollHeight - 1 <= $(outerDiv).innerHeight()) {
      if ((overflow -= 1) === 0) {
        break;
      }
      currentPercentage += incrementAmount;
      innerDiv.css("font-size", currentPercentage + "%");
    }
    return innerDiv.css("font-size", currentPercentage - (2 * incrementAmount) + "%");
  };

  SurveyPrintView.prototype.onQuestionRendered = function() {
    return this.trigger("subRendered");
  };

  return SurveyPrintView;

})(Backbone.View);
