// Generated by CoffeeScript 1.3.3
var GridPrintView,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

GridPrintView = (function(_super) {

  __extends(GridPrintView, _super);

  function GridPrintView() {
    return GridPrintView.__super__.constructor.apply(this, arguments);
  }

  GridPrintView.prototype.className = "grid_prototype";

  GridPrintView.prototype.render = function() {
    var captureLastButton, disabling, done, firstRow, gridHTML, html, i, item, minuteItemButton, modeSelector, resetButton, startTimerHTML, stopTimerHTML, _i, _j, _len, _ref, _ref1;
    this.$el.html("asdasd");
    return "FPP";
    done = 0;
    startTimerHTML = "<div class='timer_wrapper'><button class='start_time time'>Start</button><div class='timer'>" + this.timer + "</div></div>";
    disabling = this.untimed ? "" : "disabled";
    html = !this.untimed ? startTimerHTML : "";
    gridHTML = "";
    if (this.layoutMode === "fixed") {
      gridHTML += "<table class='grid " + disabling + "'>";
      firstRow = true;
      while (true) {
        if (done > this.items.length) {
          break;
        }
        gridHTML += "<tr>";
        for (i = _i = 1, _ref = this.columns; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
          if (done < this.items.length) {
            gridHTML += this.gridElement({
              label: _.escape(this.items[this.itemMap[done]]),
              i: done + 1
            });
          }
          done++;
        }
        if (firstRow) {
          if (done < (this.items.length + 1) && this.endOfLine) {
            gridHTML += "<td></td>";
          }
          firstRow = false;
        } else {
          if (done < (this.items.length + 1) && this.endOfLine) {
            gridHTML += this.endOfGridLine({
              i: done
            });
          }
        }
        gridHTML += "</tr>";
      }
      gridHTML += "</table>";
    } else {
      gridHTML += "<div class='grid " + disabling + "'>";
      _ref1 = this.items;
      for (i = _j = 0, _len = _ref1.length; _j < _len; i = ++_j) {
        item = _ref1[i];
        gridHTML += this.variableGridElement({
          "label": _.escape(this.items[this.itemMap[i]]),
          "i": i + 1
        });
      }
      gridHTML += "</div>";
    }
    html += gridHTML;
    stopTimerHTML = "<div class='timer_wrapper'><button class='stop_time time'>Stop</button><div class='timer'>" + this.timer + "</div></div>";
    resetButton = "    <div>      <button class='restart command'>Restart</button>      <br>    </div>";
    modeSelector = "";
    if (this.captureLastAttempted || this.captureItemAtTime) {
      minuteItemButton = "";
      if (this.captureItemAtTime) {
        minuteItemButton = "          <label for='minute_item'>Item at " + this.captureAfterSeconds + " seconds</label>          <input class='grid_mode' name='grid_mode' id='minute_item' type='radio' value='minuteItem'>        ";
      }
      captureLastButton = "";
      if (this.captureLastAttempted) {
        captureLastButton = "          <label for='last_attempted'>Last attempted</label>          <input class='grid_mode' name='grid_mode' id='last_attempted' type='radio' value='last'>        ";
      }
      modeSelector = "        <div id='grid_mode' class='question buttonset clearfix'>          <label>Input mode</label><br>          <label for='mark'>Mark</label>          <input class='grid_mode' name='grid_mode' id='mark' type='radio' value='mark'>          " + minuteItemButton + "          " + captureLastButton + "        </div>      ";
    }
    html += "      " + (!this.untimed ? stopTimerHTML : "") + "      " + (!this.untimed ? resetButton : "") + "      " + modeSelector + "    ";
    this.$el.html(html);
    return this.trigger("rendered");
  };

  return GridPrintView;

})(Backbone.View);
