// Generated by CoffeeScript 1.4.0
var Log, LogView, Logs,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Log = (function(_super) {

  __extends(Log, _super);

  function Log() {
    return Log.__super__.constructor.apply(this, arguments);
  }

  Log.prototype.url = "log";

  Log.prototype.app = function(code, details) {
    if (code == null) {
      code = "";
    }
    if (details == null) {
      details = "";
    }
    if (Tangerine.settings.get("context") === "server") {
      return;
    }
    if (!~Tangerine.settings.get("log").indexOf("app")) {
      return;
    }
    return this.add({
      "type": "app",
      "code": code,
      "details": details,
      "timestamp": (new Date()).getTime()
    });
  };

  Log.prototype.db = function(code, details) {
    if (code == null) {
      code = "";
    }
    if (details == null) {
      details = "";
    }
    if (Tangerine.settings.get("context") === "server") {
      return;
    }
    if (!~Tangerine.settings.get("log").indexOf("db")) {
      return;
    }
    return this.add({
      "type": "db",
      "code": code,
      "details": details,
      "timestamp": (new Date()).getTime()
    });
  };

  Log.prototype.ui = function(code, details) {
    if (code == null) {
      code = "";
    }
    if (details == null) {
      details = "";
    }
    if (Tangerine.settings.get("context") === "server") {
      return;
    }
    if (!~Tangerine.settings.get("log").indexOf("ui")) {
      return;
    }
    return this.add({
      "type": "ui",
      "code": code,
      "details": details,
      "timestamp": (new Date()).getTime()
    });
  };

  Log.prototype.err = function(code, details) {
    if (code == null) {
      code = "";
    }
    if (details == null) {
      details = "";
    }
    if (Tangerine.settings.get("context") === "server") {
      return;
    }
    return !~Tangerine.settings.get("log").indexOf("err");
    return this.add({
      "type": "err",
      "code": code,
      "details": details,
      "timestamp": (new Date()).getTime()
    });
  };

  Log.prototype.add = function(logEvent) {
    var d, name;
    d = new Date();
    name = "not-signed-in";
    if (!!(Tangerine.user.name != null)) {
      name = Tangerine.user.name;
    }
    this.unset("_rev");
    return this.save({
      "_id": this.calcName(),
      "year": d.getFullYear(),
      "month": d.getMonth(),
      "date": d.getDate(),
      "timestamp": d.getTime(),
      "user": name,
      "event": logEvent
    });
  };

  Log.prototype.calcName = function() {
    var d, user;
    d = new Date();
    user = "not-signed-in";
    if (!!(Tangerine.user.name != null)) {
      user = Tangerine.user.name;
    }
    return hex_sha1("" + user + "_" + (d.getTime()));
  };

  return Log;

})(Backbone.Model);

Logs = (function(_super) {

  __extends(Logs, _super);

  function Logs() {
    return Logs.__super__.constructor.apply(this, arguments);
  }

  Logs.prototype.url = "log";

  Logs.prototype.model = Log;

  Logs.prototype.comparator = function(model) {
    return model.get("timestamp");
  };

  return Logs;

})(Backbone.Collection);

LogView = (function(_super) {

  __extends(LogView, _super);

  function LogView() {
    this.render = __bind(this.render, this);
    return LogView.__super__.constructor.apply(this, arguments);
  }

  LogView.prototype.className = "LogView";

  LogView.prototype.initialize = function(options) {
    return this.logs = options.logs;
  };

  LogView.prototype.render = function() {
    var html,
      _this = this;
    html = "      <h1>Logs</h1>      <table><tr>        <th>User</th>        <th>Code</th>        <th>Details</th>        <th>Time</th>      </tr>      ";
    this.logs.each(function(log) {
      var code, details, ev, name, time;
      if (!(log.get("event") != null)) {
        return;
      }
      ev = log.get("event");
      name = log.get("user");
      code = ev.code;
      details = ev.details;
      time = (new Date(parseInt(ev.timestamp))).toString();
      return html += "      <tr>        <td>" + name + "</td>        <td>" + code + "</td>        <td>" + details + "</td>        <td>" + time + "</td>      </tr>      ";
    });
    this.$el.html(html);
    return this.trigger("rendered");
  };

  return LogView;

})(Backbone.View);
