// Generated by CoffeeScript 1.4.0
var Result,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Result = (function(_super) {

  __extends(Result, _super);

  function Result() {
    return Result.__super__.constructor.apply(this, arguments);
  }

  Result.prototype.url = "result";

  Result.prototype.initialize = function(options) {
    var device, deviceInfo;
    if (options.blank === true) {
      device = device || Device || {};
      deviceInfo = {
        'name': device.name,
        'platform': device.platform,
        'uuid': device.uuid,
        'version': device.version,
        'userAgent': navigator.userAgent
      };
      this.set({
        'subtestData': [],
        'start_time': (new Date()).getTime(),
        'enumerator': Tangerine.user.name,
        'tangerine_version': Tangerine.version,
        'device': deviceInfo
      });
      return this.unset("blank");
    }
  };

  Result.prototype.beforeSave = function() {};

  Result.prototype.add = function(subtestDataElement) {
    var subtestData;
    subtestDataElement['timestamp'] = (new Date()).getTime();
    subtestData = this.get('subtestData');
    subtestData.push(subtestDataElement);
    return this.save({
      'subtestData': subtestData
    });
  };

  Result.prototype.getVariable = function(key) {
    var data, name, state, subtest, value, variable, _i, _len, _ref;
    _ref = this.get("subtestData");
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      subtest = _ref[_i];
      data = subtest.data;
      for (variable in data) {
        value = data[variable];
        if (variable === key) {
          if (_.isObject(value)) {
            return _.compact((function() {
              var _results;
              _results = [];
              for (name in value) {
                state = value[name];
                _results.push(state === "checked" ? name : void 0);
              }
              return _results;
            })());
          } else {
            return value;
          }
        }
      }
    }
    return null;
  };

  Result.prototype.getGridScore = function(id) {
    var datum, _i, _len, _ref;
    _ref = this.get('subtestData');
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      datum = _ref[_i];
      if (datum.subtestId === id) {
        return parseInt(datum.data.attempted);
      }
    }
  };

  Result.prototype.gridWasAutostopped = function(id) {
    var datum, _i, _len, _ref;
    _ref = this.get('subtestData');
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      datum = _ref[_i];
      if (datum.subtestId === id) {
        return datum.data.auto_stop;
      }
    }
  };

  return Result;

})(Backbone.Model);
