// Generated by CoffeeScript 1.4.0
var DashboardView,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

DashboardView = (function(_super) {

  __extends(DashboardView, _super);

  function DashboardView() {
    this.successFunction = __bind(this.successFunction, this);

    this.render = __bind(this.render, this);

    this.update = __bind(this.update, this);

    this.syntaxHighlight = __bind(this.syntaxHighlight, this);

    this.showResult = __bind(this.showResult, this);
    return DashboardView.__super__.constructor.apply(this, arguments);
  }

  DashboardView.prototype.className = "DashboardView";

  DashboardView.prototype.el = '#content';

  DashboardView.prototype.events = {
    "change #groupBy": "update",
    "change #assessment": "update",
    "change #shiftHours": "update",
    "click .result": "showResult"
  };

  DashboardView.prototype.showResult = function(event) {
    var resultDetails, resultId,
      _this = this;
    resultDetails = $("#resultDetails");
    if (resultDetails.is(":visible")) {
      return resultDetails.hide();
    } else {
      resultId = $(event.target).text();
      return $.couch.db(document.location.pathname.match(/^\/(.*?)\//).pop()).openDoc(resultId, {
        success: function(result) {
          resultDetails.html("<pre>" + (_this.syntaxHighlight(result)) + "</pre>");
          resultDetails.css({
            top: $(event.target).position().top + 30,
            width: 400,
            left: 50
          });
          return resultDetails.show();
        }
      });
    }
  };

  DashboardView.prototype.syntaxHighlight = function(json) {
    window.json = json;
    if (typeof json !== 'string') {
      json = JSON.stringify(json, void 0, 2);
    }
    json = json.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
    return json.replace(/("(\\u[a-zA-Z0-9]{4}|\\[^u]|[^\\"])*"(\s*:)?|\b(true|false|null)\b|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?)/g, function(match) {
      var cls;
      cls = 'number';
      if (/^"/.test(match)) {
        if (/:$/.test(match)) {
          cls = 'key';
        } else {
          cls = 'string';
        }
      } else if (/true|false/.test(match)) {
        cls = 'boolean';
      } else if (/null/.test(match)) {
        cls = 'null';
      }
      return '<span class="' + cls + '">' + match + '</span>';
    });
  };

  DashboardView.prototype.update = function() {
    return Tangerine.router.navigate("dashboard/groupBy/" + ($("#groupBy").val()) + "/assessment/" + ($("#assessment").val()) + "/shiftHours/" + ($("#shiftHours").val()), true);
  };

  DashboardView.prototype.render = function(options) {
    this.groupBy = options.groupBy;
    this.key = options.assessment;
    this.shiftHours = options.shiftHours || 0;
    if (this.key === "All") {
      return $.couch.db(Tangerine.db_name).view("" + Tangerine.design_doc + "/dashboardResults", {
        reduce: false,
        success: this.successFunction
      });
    } else {
      return $.couch.db(Tangerine.db_name).view("" + Tangerine.design_doc + "/dashboardResults", {
        key: this.key,
        reduce: false,
        success: this.successFunction
      });
    }
  };

  DashboardView.prototype.successFunction = function(result) {
    var dates, propertiesToGroupBy, tableRows,
      _this = this;
    tableRows = {};
    dates = {};
    propertiesToGroupBy = {};
    if (this.groupBy == null) {
      this.groupBy = _.keys(result.rows[0].value)[0];
    }
    _.each(result.rows, function(row) {
      var date, leftColumn;
      leftColumn = row.value[_this.groupBy];
      date = row.value.startTime ? moment(row.value.startTime).add("h", _this.shiftHours).format("Do MMM") : "Unknown";
      dates[date] = date;
      if (tableRows[leftColumn] == null) {
        tableRows[leftColumn] = {};
      }
      if (tableRows[leftColumn][date] == null) {
        tableRows[leftColumn][date] = [];
      }
      return tableRows[leftColumn][date].push("        <div style='padding-top:10px;'>          <table>          " + (_.map(row.value, function(value, key) {
        propertiesToGroupBy[key] = true;
        if (key === "startTime") {
          value = moment(value).add("h", _this.shiftHours).format("YYYY-MM-DD HH:mm");
        }
        if (key === "resultId") {
          value = "<button class='result'>" + value + "</button>";
        }
        return "<tr><td>" + key + "</td><td>" + value + "</td></tr>";
      }).join("")) + "          </table>        </div>        <hr/>      ");
    });
    this.$el.html("      Assessment:      <select id='assessment'>      </select>      <br/>      Value used for grouping:      <select id='groupBy'>        " + (_.map(propertiesToGroupBy, function(value, key) {
      return "<option " + (key === _this.groupBy ? "selected='true'" : '') + ">              " + key + "            </option>";
    })) + "      </select>      <br/>      <br/>      <button onClick='$(\"#advancedOptions\").toggle()'>Advanced Options</button>      <div style='display:none' id='advancedOptions'>      Current time in your timezone (" + (jstz.determine().name()) + ") is " + (moment().format("YYYY-MM-DD HH:mm")) + "<br/>      Shift time values by <input id='shiftHours' type='number' value='" + this.shiftHours + "'></input> hours to handle correct timezone.<br/>      Shifted time: " + (moment().add("h", this.shiftHours).format("YYYY-MM-DD HH:mm")) + "      <br/>      </div>      <table id='results' class='tablesorter'>        <thead>          <th>" + this.groupBy + "</th>          " + (_.map(_.sortBy(dates, function(date) {
      return date;
    }), function(date) {
      return "<th class='" + (date.replace(/\s/g, '-')) + "'>" + date + "</th>";
    }).join("")) + "        </thead>        <tbody>          " + (_.map(tableRows, function(dataForDates, leftColumn) {
      return "<tr>                <td>" + leftColumn + "</td>                " + (_.map(_.sortBy(dates, function(date) {
        return date;
      }), function(date) {
        return "<td class='" + (date.replace(/\s/g, '-')) + "'>                      " + (dataForDates[date] ? "                            <button class='sort-value' onClick='$(this).siblings().toggle()'>" + dataForDates[date].length + "</button>                            <div style='display:none'>                              " + (dataForDates[date].join("")) + "                            </div>                          " : "") + "                    </td>";
      }).join("")) + "              </tr>";
    }).join("")) + "        </tbody>      </table>      <div id='resultDetails'>      </div>      <style>        #resultDetails{          position:absolute;          background-color:black;          display:none;        }        pre {          font-size: 75%;          outline: 1px solid #ccc;           padding: 5px;           margin: 5px;           text-shadow: none;          overflow-wrap:break-word;        }        .string { color: green; }        .number { color: darkorange; }        .boolean { color: blue; }        .null { color: magenta; }        .key { color: red; }      </style>    ");
    $("table").tablesorter({
      widgets: ['zebra'],
      sortList: [[0, 0]],
      textExtraction: function(node) {
        var sortValue;
        sortValue = $(node).find(".sort-value").text();
        if (sortValue !== "") {
          return sortValue;
        } else {
          return $(node).text();
        }
      }
    });
    $("#advancedOptions").append("Select which dates to show<br/>");
    _.each(_.sortBy(dates, function(date) {
      return date;
    }), function(date) {
      var dateCheckbox;
      dateCheckbox = $("<label for='" + date + "'>" + date + "</label><input name='" + date + "' id='" + date + "' type='checkbox' checked='true'/>");
      dateCheckbox.click(function() {
        return $("." + (date.replace(/\s/, '-'))).toggle();
      });
      return $("#advancedOptions").append(dateCheckbox);
    });
    return $.couch.db(Tangerine.db_name).view("" + Tangerine.design_doc + "/dashboardResults", {
      group: true,
      success: function(result) {
        $("select#assessment").html("<option>All</option>" + _.map(result.rows, function(row) {
          return "<option value='" + row.key + "' " + (row.key === _this.key ? "selected='true'" : "") + ">" + row.key + "</option>";
        }).join(""));
        return _.each(result.rows, function(row) {
          if (row.key == null) {
            return;
          }
          return $.couch.db(Tangerine.db_name).openDoc(row.key, {
            success: function(result) {
              return $("option[value=" + row.key + "]").html(result.name);
            },
            error: function(result) {
              return $("option[value=" + row.key + "]").html("Unknown assessment");
            }
          });
        });
      }
    });
  };

  return DashboardView;

})(Backbone.View);
