// Generated by CoffeeScript 1.3.3
var ReportView,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

ReportView = (function(_super) {

  __extends(ReportView, _super);

  function ReportView() {
    return ReportView.__super__.constructor.apply(this, arguments);
  }

  ReportView.prototype.initialize = function(options) {
    var allResults,
      _this = this;
    this.table = {
      'studentId': [],
      'correct': [],
      'incorrect': [],
      'missing': []
    };
    this.assessmentId = options.assessmentId;
    console.log("Initializing ReportView: " + this.assessmentId);
    allResults = new Results;
    return allResults.fetch({
      success: function(collection) {
        var result, subtestKey, subtestValue, _i, _len, _ref, _ref1;
        console.log(collection);
        _this.results = collection.where({
          assessmentId: _this.assessmentId
        });
        _ref = _this.results;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          result = _ref[_i];
          _ref1 = result.attributes.subtestData;
          for (subtestKey in _ref1) {
            subtestValue = _ref1[subtestKey];
            if (subtestValue.name === "Student ID") {
              _this.table.studentId.push(subtestValue.data.student_id);
              _this.table.correct.push(0);
              _this.table.incorrect.push(0);
              _this.table.missing.push(0);
            } else if (subtestValue.data.letters_results != null) {
              _this.table.correct[_this.table.correct.lastIndexOf(0)] = _this.table.correct[_this.table.correct.lastIndexOf(0)] + subtestValue.sum.correct;
              _this.table.incorrect[_this.table.incorrect.lastIndexOf(0)] = _this.table.incorrect[_this.table.incorrect.lastIndexOf(0)] + subtestValue.sum.incorrect;
              _this.table.missing[_this.table.missing.lastIndexOf(0)] = _this.table.missing[_this.table.missing.lastIndexOf(0)] + subtestValue.sum.missing;
            }
          }
        }
        return console.log(_this.table);
      }
    });
  };

  ReportView.prototype.render = function() {
    return this.trigger("rendered");
  };

  return ReportView;

})(Backbone.View);
