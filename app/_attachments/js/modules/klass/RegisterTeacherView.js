// Generated by CoffeeScript 1.4.0
var RegisterTeacherView,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

RegisterTeacherView = (function(_super) {

  __extends(RegisterTeacherView, _super);

  function RegisterTeacherView() {
    return RegisterTeacherView.__super__.constructor.apply(this, arguments);
  }

  RegisterTeacherView.prototype.className = "RegisterTeacherView";

  RegisterTeacherView.prototype.events = {
    'click .register': 'register',
    'click .cancel': 'cancel'
  };

  RegisterTeacherView.prototype.initialize = function(options) {
    this.name = options.name;
    this.pass = options.pass;
    return this.fields = ["first", "last", "gender", "school", "contact"];
  };

  RegisterTeacherView.prototype.cancel = function() {
    return Tangerine.router.login();
  };

  RegisterTeacherView.prototype.register = function() {
    var _this = this;
    return this.validate(function() {
      return _this.saveUser();
    });
  };

  RegisterTeacherView.prototype.validate = function(callback) {
    var element, errors, _i, _len, _ref;
    errors = false;
    _ref = this.fields;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      element = _ref[_i];
      if (_.isEmpty(this[element].val())) {
        this.$el.find("#" + element + "_message").html("Please fill out this field.");
        errors = true;
      } else {
        this.$el.find("#" + element + "_message").html("");
      }
    }
    if (errors) {
      return Utils.midAlert("Please correct the errors on this page.");
    } else {
      return callback();
    }
  };

  RegisterTeacherView.prototype.saveUser = function() {
    var couchUserDoc, element, teacher, teacherDoc, _i, _len, _ref,
      _this = this;
    teacherDoc = {
      "name": this.name
    };
    _ref = this.fields;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      element = _ref[_i];
      teacherDoc[element] = this[element].val();
    }
    couchUserDoc = {
      "name": this.name
    };
    teacher = new Teacher(teacherDoc);
    return teacher.save({
      "_id": Utils.humanGUID()
    }, {
      success: function() {
        return $.couch.userDb(function(db) {
          return db.openDoc("org.couchdb.user:" + _this.name, {
            success: function(userDoc) {
              var newUserDoc;
              newUserDoc = $.extend(userDoc, {
                teacherId: teacher.id
              });
              return db.saveDoc(userDoc, {
                success: function() {
                  Utils.midAlert("New teacher registered");
                  return Tangerine.user.login(_this.name, _this.pass);
                },
                error: function(error) {
                  return Utils.midAlert("Registration error<br>" + error, 5000);
                }
              });
            }
          });
        });
      }
    });
  };

  RegisterTeacherView.prototype.render = function() {
    var element, x, _i, _len, _ref;
    this.$el.html("      <h1>Register new teacher</h1>      <table>        <tr>          <td class='small_grey'><b>Username</b></td>          <td class='small_grey'>" + this.name + "</td>          <td class='small_grey'><b>Password</b></td>          <td class='small_grey'>" + (((function() {
      var _i, _len, _ref, _results;
      _ref = this.pass;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        x = _ref[_i];
        _results.push("*");
      }
      return _results;
    }).call(this)).join('')) + "</td>        </tr>      </table>      <div class='label_value'>        <label for='first'>First name</label>        <div id='first_message' class='messages'></div>        <input id='first'>      </div>      <div class='label_value'>        <label for='last'>Last Name</label>        <div id='last_message' class='messages'></div>        <input id='last'>      </div>      <div class='label_value'>        <label for='gender'>Gender</label>        <div id='gender_message' class='messages'></div>        <input id='gender'>      </div>      <div class='label_value'>        <label for='school'>School name</label>        <div id='school_message' class='messages'></div>        <input id='school'>      </div>      <div class='label_value'>        <label for='contact'>Email address or mobile phone number</label>        <div type='email' id='contact_message' class='messages'></div>        <input id='contact'>      </div>      <button class='register command'>Register</button> <button class='cancel command'>Cancel</button>    ");
    _ref = this.fields;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      element = _ref[_i];
      this[element] = this.$el.find("#" + element);
    }
    return this.trigger("rendered");
  };

  return RegisterTeacherView;

})(Backbone.View);
