// Generated by CoffeeScript 1.4.0
var KlassSubtestRunView,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

KlassSubtestRunView = (function(_super) {

  __extends(KlassSubtestRunView, _super);

  function KlassSubtestRunView() {
    this.onPrototypeRendered = __bind(this.onPrototypeRendered, this);
    return KlassSubtestRunView.__super__.constructor.apply(this, arguments);
  }

  KlassSubtestRunView.prototype.events = {
    'click .done': 'done',
    'click .cancel': 'cancel',
    'click .subtest_help': 'toggleHelp'
  };

  KlassSubtestRunView.prototype.toggleHelp = function() {
    return this.$el.find(".enumerator_help").fadeToggle(250);
  };

  KlassSubtestRunView.prototype.initialize = function(options) {
    this.linkedResult = options.linkedResult;
    this.student = options.student;
    this.subtest = options.subtest;
    this.questions = options.questions;
    this.prototype = this.subtest.get("prototype");
    this.protoViews = Tangerine.config.get("prototypeViews");
    this.prototypeRendered = false;
    if (this.prototype === "grid") {
      return this.result = new KlassResult({
        prototype: "grid",
        startTime: (new Date()).getTime(),
        itemType: this.subtest.get("itemType"),
        reportType: this.subtest.get("reportType"),
        studentId: this.student.id,
        subtestId: this.subtest.id,
        part: this.subtest.get("part"),
        klassId: this.student.get("klassId"),
        timeAllowed: this.subtest.get("timer")
      });
    } else if (this.prototype === "survey") {
      this.result = new KlassResult({
        prototype: "survey",
        startTime: (new Date()).getTime(),
        studentId: this.student.id,
        subtestId: this.subtest.id,
        part: this.subtest.get("part"),
        klassId: this.student.get("klassId"),
        itemType: this.subtest.get("itemType"),
        reportType: this.subtest.get("reportType")
      });
      this.questions.sort();
      return this.render();
    }
  };

  KlassSubtestRunView.prototype.render = function() {
    var enumeratorHelp, studentDialog;
    enumeratorHelp = (this.subtest.get("enumeratorHelp") || "") !== "" ? "<button class='subtest_help command'>help</button><div class='enumerator_help'>" + (this.options.subtest.get('enumeratorHelp')) + "</div>" : "";
    studentDialog = (this.subtest.get("studentDialog") || "") !== "" ? "<div class='student_dialog'>" + (this.options.subtest.get('studentDialog')) + "</div>" : "";
    this.$el.html("      <h2>" + (this.options.subtest.get('name')) + "</h2>      " + enumeratorHelp + "      " + studentDialog + "    ");
    this.prototypeView = new window[this.protoViews[this.subtest.get('prototype')]['run']]({
      model: this.subtest,
      parent: this
    });
    this.prototypeView.on("rendered", this.onPrototypeRendered);
    this.prototypeView.render();
    this.$el.append(this.prototypeView.el);
    this.prototypeRendered = true;
    this.$el.append("<button class='done navigation'>Done</button> <button class='cancel navigation'>Cancel</button>");
    return this.trigger("rendered");
  };

  KlassSubtestRunView.prototype.onPrototypeRendered = function() {
    return this.trigger("rendered");
  };

  KlassSubtestRunView.prototype.getGridScore = function() {
    var result;
    if (!(this.linkedResult.get("subtestData") != null)) {
      return false;
    }
    result = this.linkedResult.get("subtestData")['attempted'] || 0;
    return result;
  };

  KlassSubtestRunView.prototype.gridWasAutostopped = function() {
    var _ref;
    return ((_ref = this.linkedResult.get("subtestData")) != null ? _ref['auto_stop'] : void 0) || 0;
  };

  KlassSubtestRunView.prototype.onClose = function() {
    var _ref;
    return (_ref = this.prototypeView) != null ? typeof _ref.close === "function" ? _ref.close() : void 0 : void 0;
  };

  KlassSubtestRunView.prototype.isValid = function() {
    if (!this.prototypeRendered) {
      return false;
    }
    if (this.prototypeView.isValid != null) {
      return this.prototypeView.isValid();
    } else {
      return false;
    }
    return true;
  };

  KlassSubtestRunView.prototype.getSkipped = function() {
    if (this.prototypeView.getSkipped != null) {
      return this.prototypeView.getSkipped();
    } else {
      throw "Prototype skipping not implemented";
    }
  };

  KlassSubtestRunView.prototype.cancel = function() {
    return Tangerine.router.navigate("class/" + (this.options.student.get('klassId')) + "/" + (this.options.subtest.get('part')), true);
  };

  KlassSubtestRunView.prototype.done = function() {
    var _this = this;
    if (this.isValid()) {
      return Tangerine.$db.view("tangerine/resultsByStudentSubtest", {
        key: [this.options.student.id, this.subtest.id],
        success: function(data) {
          var datum, rows, _i, _len;
          rows = data.rows;
          for (_i = 0, _len = rows.length; _i < _len; _i++) {
            datum = rows[_i];
            Tangerine.$db.saveDoc($.extend(datum.value, {
              "old": true
            }));
          }
          return _this.result.add(_this.prototypeView.getResult(), function() {
            return Tangerine.router.navigate("class/" + (_this.options.student.get('klassId')) + "/" + (_this.options.subtest.get('part')), true);
          });
        }
      });
    } else {
      return this.prototypeView.showErrors();
    }
  };

  return KlassSubtestRunView;

})(Backbone.View);
