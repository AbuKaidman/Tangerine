// Generated by CoffeeScript 1.4.0
var KlassResult,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

KlassResult = (function(_super) {

  __extends(KlassResult, _super);

  function KlassResult() {
    return KlassResult.__super__.constructor.apply(this, arguments);
  }

  KlassResult.prototype.url = "result";

  KlassResult.prototype.add = function(subtestDataElement, callback) {
    var _this = this;
    return this.save({
      'subtestData': subtestDataElement
    }, {
      success: function() {
        return callback();
      }
    });
  };

  KlassResult.prototype.get = function(options) {
    if (options === "correct") {
      return this.gridCount(["correct", 1]);
    }
    if (options === "incorrect") {
      return this.gridCount(["incorrect", 0]);
    }
    if (options === "missing") {
      return this.gridCount(["missing", 9]);
    }
    if (options === "total") {
      if (this.attributes.prototype === "grid") {
        return this.attributes.subtestData.items.length;
      } else if (this.attributes.prototype === "survey") {
        return _.keys(this.attributes.subtestData).length;
      }
    }
    if (options === "attempted") {
      return this.getAttempted();
    }
    if (options === "time_remain") {
      return this.getTimeRemain();
    }
    return KlassResult.__super__.get.call(this, options);
  };

  KlassResult.prototype.gridCount = function(value) {
    var count, item, k, v, _i, _j, _len, _len1, _ref, _ref1, _ref2, _ref3;
    count = 0;
    if (this.attributes.prototype === "grid") {
      if (_.isArray(value)) {
        _ref = this.get("subtestData").items;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          item = _ref[_i];
          if (~value.indexOf(item.itemResult)) {
            count++;
          }
        }
      } else {
        _ref1 = this.get("subtestData").items;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          item = _ref1[_j];
          if (item.itemResult === value) {
            count++;
          }
        }
      }
    } else if (this.attributes.prototype === "survey") {
      if (_.isArray(value)) {
        _ref2 = this.attributes.subtestData;
        for (k in _ref2) {
          v = _ref2[k];
          if (~value.indexOf(v) || ~value.indexOf(parseInt(v))) {
            count++;
          }
        }
      } else {
        _ref3 = this.attributes.subtestData;
        for (k in _ref3) {
          v = _ref3[k];
          if (value === v || value === parseInt(v)) {
            count++;
          }
        }
      }
    }
    return count;
  };

  KlassResult.prototype.getAttempted = function() {
    return parseInt(this.get("subtestData").attempted);
  };

  KlassResult.prototype.getTimeRemain = function() {
    return parseInt(this.get("subtestData").time_remain);
  };

  KlassResult.prototype.getCorrectPerSeconds = function(secondsAllowed) {
    return Math.round((this.get("correct") / (secondsAllowed - this.getTimeRemain())) * secondsAllowed);
  };

  return KlassResult;

})(Backbone.Model);
