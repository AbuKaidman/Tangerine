// Generated by CoffeeScript 1.6.2
var utils;

utils = {
  clone: function(item) {
    var key, result, types, value;

    if (item == null) {
      return item;
    }
    types = [Number, String, Boolean];
    result = null;
    types.forEach(function(type) {
      if (item instanceof type) {
        return result = type(item);
      }
    });
    if (typeof result === "undefined") {
      if (Object.prototype.toString.call(item) === "[object Array]") {
        result = [];
        item.forEach(function(child, index, array) {
          return result[index] = Utils.clone(child);
        });
      } else if (typeof item === "object") {
        if (item.nodeType && typeof item.cloneNode === "function") {
          result = item.cloneNode(true);
        } else if (!item.prototype) {
          if (item instanceof Date) {
            result = new Date(item);
          } else {
            result = {};
            for (key in item) {
              value = item[key];
              result[key] = utils.clone(value);
            }
          }
        } else {
          result = false && item.constructor ? new item.constructor() : item;
        }
      } else {
        result = item;
      }
    }
    return result;
  },
  exportValueMap: {
    "correct": 1,
    "checked": 1,
    "incorrect": "0",
    "unchecked": "0",
    "missing": ".",
    "not_asked": ".",
    "skipped": 999
  },
  exportValue: function(databaseValue) {
    if (databaseValue == null) {
      databaseValue = "no_record";
    }
    if (utils.exportValueMap[databaseValue] != null) {
      return utils.exportValueMap[databaseValue];
    } else {
      return String(databaseValue);
    }
  },
  pair: function(key, value) {
    var o;

    if (value === void 0) {
      value = "no_record";
    }
    o = {};
    o[key] = value;
    return o;
  }
};

if (typeof exports === "object") {
  exports.clone = utils.clone;
  exports.exportValue = utils.exportValue;
  exports.pair = utils.pair;
}
